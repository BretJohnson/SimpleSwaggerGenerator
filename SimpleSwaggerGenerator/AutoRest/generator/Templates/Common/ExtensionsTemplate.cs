#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace AutoRest.CSharp.Templates.Rest.Common
{
using System;
using System.Collections.Generic;
using System.Linq;

#line 2 "ExtensionsTemplate.cshtml"
using System.Text;

#line default
#line hidden

#line 3 "ExtensionsTemplate.cshtml"
using AutoRest.CSharp.Model;

#line default
#line hidden

#line 4 "ExtensionsTemplate.cshtml"
using AutoRest.CSharp.Templates;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class ExtensionsTemplate : AutoRest.Core.Template<AutoRest.CSharp.Model.MethodGroupCs>
{

#line hidden

public override void Execute()
{

#line 6 "ExtensionsTemplate.cshtml"
Write(Header("// "));


#line default
#line hidden
WriteLiteral("\n");


#line 7 "ExtensionsTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\nnamespace ");


#line 8 "ExtensionsTemplate.cshtml"
     Write(Settings.Namespace);


#line default
#line hidden
WriteLiteral("\n{\n");


#line 10 "ExtensionsTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral(@"

    using System;
    using System.Runtime.Serialization;
    public static partial class EnumExtensions
    {
        public static string GetEnumMember<T>(this T enumerationValue) where T : struct, IConvertible
        {
            var type = enumerationValue.GetType();
            if (!type.IsEnum)
            {
                throw new ArgumentException(""EnumerationValue must be of Enum type"", ""enumerationValue"");
            }
            var memberInfo = type.GetMember(enumerationValue.ToString());
            if (memberInfo != null && memberInfo.Length > 0)
            {
                var attrs = memberInfo[0].GetCustomAttributes(typeof(EnumMemberAttribute), false);

                if (attrs != null && attrs.Length > 0)
                {
                    return ((EnumMemberAttribute)attrs[0]).Value;
                }
            }
            return enumerationValue.ToString();
        }
    }
}
");

}
}
}
#pragma warning restore 1591
