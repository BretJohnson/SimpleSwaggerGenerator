#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace AutoRest.CSharp.Templates.Rest.Common
{
using System;
using System.Collections.Generic;

#line 2 "ModelTemplate.cshtml"
using System.Linq;

#line default
#line hidden
using System.Text;

#line 3 "ModelTemplate.cshtml"
using System.Runtime.Remoting.Messaging;

#line default
#line hidden

#line 4 "ModelTemplate.cshtml"
using AutoRest.Core;

#line default
#line hidden

#line 5 "ModelTemplate.cshtml"
using AutoRest.Core.Model;

#line default
#line hidden

#line 6 "ModelTemplate.cshtml"
using AutoRest.Core.Utilities;

#line default
#line hidden

#line 7 "ModelTemplate.cshtml"
using AutoRest.CSharp;

#line default
#line hidden

#line 8 "ModelTemplate.cshtml"
using AutoRest.CSharp.Model;

#line default
#line hidden

#line 9 "ModelTemplate.cshtml"
using AutoRest.Extensions;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class ModelTemplate : Template<global::AutoRest.CSharp.Model.CompositeTypeCs>
{

#line hidden

public override void Execute()
{

#line 11 "ModelTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\nnamespace ");


#line 12 "ModelTemplate.cshtml"
      Write(Settings.Namespace);


#line default
#line hidden
WriteLiteral(".");


#line 12 "ModelTemplate.cshtml"
                            Write(Settings.ModelsName);


#line default
#line hidden
WriteLiteral("\n{\n    using System.Linq;\n");


#line 15 "ModelTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n\n");


#line 17 "ModelTemplate.cshtml"
 if (!string.IsNullOrEmpty(Model.Summary) || !string.IsNullOrWhiteSpace(Model.Documentation))
{


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("/// <summary>\n");

WriteLiteral("    ");


#line 20 "ModelTemplate.cshtml"
 Write(WrapComment("/// ", (string.IsNullOrEmpty(Model.Summary) ? Model.Documentation : Model.Summary).EscapeXmlComment()));


#line default
#line hidden
WriteLiteral("\n");


#line 21 "ModelTemplate.cshtml"
        if (!string.IsNullOrEmpty(Model.ExternalDocsUrl))
        {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("/// <see href=\"");


#line 23 "ModelTemplate.cshtml"
                Write(Model.ExternalDocsUrl);


#line default
#line hidden
WriteLiteral("\" />\n");


#line 24 "ModelTemplate.cshtml"
        }


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("/// </summary>\n");


#line 26 "ModelTemplate.cshtml"
}


#line default
#line hidden

#line 27 "ModelTemplate.cshtml"
 if (!string.IsNullOrEmpty(Model.Summary) && !string.IsNullOrWhiteSpace(Model.Documentation))
{


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("/// <remarks>\n");

WriteLiteral("    ");


#line 30 "ModelTemplate.cshtml"
 Write(WrapComment("/// ", Model.Documentation.EscapeXmlComment()));


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("    ");

WriteLiteral("/// </remarks>\n");


#line 32 "ModelTemplate.cshtml"
}


#line default
#line hidden
WriteLiteral("\n");


#line 34 "ModelTemplate.cshtml"
    

#line default
#line hidden

#line 34 "ModelTemplate.cshtml"
     if (Model.NeedsPolymorphicConverter)
    {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("[Newtonsoft.Json.JsonObject(\"");


#line 36 "ModelTemplate.cshtml"
                              Write(Model.SerializedName);


#line default
#line hidden
WriteLiteral("\")]\n");


#line 37 "ModelTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("\n");


#line 39 "ModelTemplate.cshtml"
    

#line default
#line hidden

#line 39 "ModelTemplate.cshtml"
     if (Model.NeedsTransformationConverter)
    {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("[Microsoft.Rest.Serialization.JsonTransformation]\n");


#line 42 "ModelTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("\n    public partial class ");


#line 44 "ModelTemplate.cshtml"
                    Write(Model.Name);


#line default
#line hidden

#line 44 "ModelTemplate.cshtml"
                                Write(Model.BaseModelType != null ? " : " + Model.BaseModelType.Name : "");


#line default
#line hidden
WriteLiteral("\n    {\n        /// <summary>\n");

WriteLiteral("        ");


#line 47 "ModelTemplate.cshtml"
   Write(WrapComment("/// ", ("Initializes a new instance of the " + Model.Name + " class.").EscapeXmlComment()));


#line default
#line hidden
WriteLiteral("\n        /// </summary>\n");


#line 49 "ModelTemplate.cshtml"
        

#line default
#line hidden

#line 49 "ModelTemplate.cshtml"
         if (Model.Properties.Any(p => p.ModelType is CompositeType && ((CompositeType)p.ModelType).ContainsConstantProperties))
        {


#line default
#line hidden
WriteLiteral("\n        public ");


#line 52 "ModelTemplate.cshtml"
           Write(Model.Name);


#line default
#line hidden
WriteLiteral("()\n        {\n");


#line 54 "ModelTemplate.cshtml"
            

#line default
#line hidden

#line 54 "ModelTemplate.cshtml"
             foreach(var property in Model.ComposedProperties.Where(p => p.ModelType is CompositeType
                && !p.IsConstant
                && p.IsRequired
                && ((CompositeType)p.ModelType).ContainsConstantProperties))
            {


#line default
#line hidden
WriteLiteral("            ");


#line 59 "ModelTemplate.cshtml"
          Write(property.Name);


#line default
#line hidden
WriteLiteral(" = new ");


#line 59 "ModelTemplate.cshtml"
                                 Write(property.ModelTypeName);


#line default
#line hidden
WriteLiteral("();\n");


#line 60 "ModelTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("        }\n");

WriteLiteral("\n");


#line 63 "ModelTemplate.cshtml"
        }
        else
        {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("public ");


#line 66 "ModelTemplate.cshtml"
             Write(Model.Name);


#line default
#line hidden
WriteLiteral("() { }\n");


#line 67 "ModelTemplate.cshtml"
        }


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("        ");


#line 69 "ModelTemplate.cshtml"
   Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n\n");


#line 71 "ModelTemplate.cshtml"
        

#line default
#line hidden

#line 71 "ModelTemplate.cshtml"
         if (!string.IsNullOrEmpty(Model.ConstructorParameters))
        {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("/// <summary>\n");

WriteLiteral("        ");


#line 74 "ModelTemplate.cshtml"
     Write(WrapComment("/// ", ("Initializes a new instance of the " + Model.Name + " class.").EscapeXmlComment()));


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("        ");

WriteLiteral("/// </summary>\n");


#line 76 "ModelTemplate.cshtml"
        foreach (var parameter in Model.ConstructorParametersDocumentation)
        {


#line default
#line hidden
WriteLiteral("        ");


#line 78 "ModelTemplate.cshtml"
     Write(WrapComment("/// ", parameter));


#line default
#line hidden
WriteLiteral("\n");


#line 79 "ModelTemplate.cshtml"
        }


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("public ");


#line 80 "ModelTemplate.cshtml"
             Write(Model.Name);


#line default
#line hidden
WriteLiteral("(");


#line 80 "ModelTemplate.cshtml"
                          Write(Model.ConstructorParameters);


#line default
#line hidden
WriteLiteral(")\n");


#line 81 "ModelTemplate.cshtml"
            if (!string.IsNullOrEmpty(Model.BaseConstructorCall))
            {


#line default
#line hidden
WriteLiteral("            ");


#line 83 "ModelTemplate.cshtml"
          Write(Model.BaseConstructorCall);


#line default
#line hidden
WriteLiteral("\n");


#line 84 "ModelTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("{\n");


#line 86 "ModelTemplate.cshtml"

            foreach (var property in Model.ComposedProperties.Where(p => p.ModelType is CompositeType
                     && !p.IsConstant
                     && p.IsRequired
                     && ((CompositeType)p.ModelType).ContainsConstantProperties))
            {


#line default
#line hidden
WriteLiteral("            ");


#line 92 "ModelTemplate.cshtml"
          Write(property.Name);


#line default
#line hidden
WriteLiteral(" = new ");


#line 92 "ModelTemplate.cshtml"
                                 Write(property.ModelTypeName);


#line default
#line hidden
WriteLiteral("();\n");


#line 93 "ModelTemplate.cshtml"
            }

            foreach (var property in Model.Properties.Where(p => !p.IsConstant))
            {
                var propName = CodeNamer.Instance.CamelCase(property.Name);
                if (property.Name.Value.Equals(propName))
                {


#line default
#line hidden
WriteLiteral("            ");

WriteLiteral("this.");


#line 100 "ModelTemplate.cshtml"
               Write(property.Name);


#line default
#line hidden
WriteLiteral(" = ");


#line 100 "ModelTemplate.cshtml"
                                 Write(propName);


#line default
#line hidden
WriteLiteral(";\n");


#line 101 "ModelTemplate.cshtml"
                }
                else
                {


#line default
#line hidden
WriteLiteral("            ");


#line 104 "ModelTemplate.cshtml"
          Write(property.Name);


#line default
#line hidden
WriteLiteral(" = ");


#line 104 "ModelTemplate.cshtml"
                            Write(propName);


#line default
#line hidden
WriteLiteral(";\n");


#line 105 "ModelTemplate.cshtml"
                }
            }            



#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("}\n");


#line 109 "ModelTemplate.cshtml"
        }


#line default
#line hidden
WriteLiteral("\n");


#line 111 "ModelTemplate.cshtml"
        

#line default
#line hidden

#line 111 "ModelTemplate.cshtml"
         if (Model.Properties.Any(p => p.IsConstant))
        {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("/// <summary>\n");

WriteLiteral("        ");


#line 114 "ModelTemplate.cshtml"
     Write(WrapComment("/// ", ("Static constructor for " + Model.Name + " class.").EscapeXmlComment()));


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("        ");

WriteLiteral("/// </summary>\n");

WriteLiteral("        ");

WriteLiteral("static ");


#line 116 "ModelTemplate.cshtml"
             Write(Model.Name);


#line default
#line hidden
WriteLiteral("()\n");

WriteLiteral("        ");

WriteLiteral("{\n");


#line 118 "ModelTemplate.cshtml"
            foreach (var property in Model.Properties.Where(p => p.IsConstant))
            {


#line default
#line hidden
WriteLiteral("            ");


#line 120 "ModelTemplate.cshtml"
          Write(property.Name);


#line default
#line hidden
WriteLiteral(" = ");


#line 120 "ModelTemplate.cshtml"
                             Write(property.DefaultValue);


#line default
#line hidden
WriteLiteral(";\n");


#line 121 "ModelTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("}\n");


#line 123 "ModelTemplate.cshtml"
        }


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("        ");


#line 125 "ModelTemplate.cshtml"
   Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n");


#line 126 "ModelTemplate.cshtml"
        

#line default
#line hidden

#line 126 "ModelTemplate.cshtml"
         foreach (var property in Model.Properties.Where(p => !p.IsConstant))
        {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("/// <summary>\n");

WriteLiteral("        ");


#line 129 "ModelTemplate.cshtml"
     Write(WrapComment("/// ", property.GetFormattedPropertySummary()));


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("        ");

WriteLiteral("/// </summary>\n");


#line 131 "ModelTemplate.cshtml"
            if(!string.IsNullOrEmpty(property.Summary) && !string.IsNullOrEmpty(property.Documentation))
            { 


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("/// <remarks>\n");

WriteLiteral("        ");


#line 134 "ModelTemplate.cshtml"
     Write(WrapComment("/// ", property.Documentation));


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("        ");

WriteLiteral("/// </remarks>\n");


#line 136 "ModelTemplate.cshtml"
            }
            if (property.ModelType.IsPrimaryType(KnownPrimaryType.Date))
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.DateJsonConver" +
"ter))]\n");


#line 140 "ModelTemplate.cshtml"
            }
            if (property.ModelType.IsPrimaryType(KnownPrimaryType.DateTimeRfc1123))
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.DateTimeRfc112" +
"3JsonConverter))]\n");


#line 144 "ModelTemplate.cshtml"
            }
            if (property.ModelType.IsPrimaryType(KnownPrimaryType.Base64Url))
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.Base64UrlJsonC" +
"onverter))]\n");


#line 148 "ModelTemplate.cshtml"
            }
            if (property.ModelType.IsPrimaryType(KnownPrimaryType.UnixTime))
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.UnixTimeJsonCo" +
"nverter))]\n");


#line 152 "ModelTemplate.cshtml"
            }

            if (property.ModelType is DictionaryType && (property.ModelType as DictionaryType).SupportsAdditionalProperties)
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonExtensionData]\n");


#line 157 "ModelTemplate.cshtml"
            }
            else
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonProperty(PropertyName = \"");


#line 160 "ModelTemplate.cshtml"
                                                   Write(property.SerializedName);


#line default
#line hidden
WriteLiteral("\")]\n");


#line 161 "ModelTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("public ");


#line 162 "ModelTemplate.cshtml"
            Write(property.ModelTypeName);


#line default
#line hidden
WriteLiteral(" ");


#line 162 "ModelTemplate.cshtml"
                                    Write(property.Name);


#line default
#line hidden
WriteLiteral(" { get; ");


#line 162 "ModelTemplate.cshtml"
                                                           Write(property.IsReadOnly ? "protected " : "");


#line default
#line hidden
WriteLiteral("set; }\n");


#line 163 "ModelTemplate.cshtml"
        

#line default
#line hidden

#line 163 "ModelTemplate.cshtml"
   Write(EmptyLine);


#line default
#line hidden

#line 163 "ModelTemplate.cshtml"
                  
        }


#line default
#line hidden
WriteLiteral("\n");


#line 166 "ModelTemplate.cshtml"
        

#line default
#line hidden

#line 166 "ModelTemplate.cshtml"
         foreach (var property in Model.Properties.Where(p => p.IsConstant))
        {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("/// <summary>\n");

WriteLiteral("        ");


#line 169 "ModelTemplate.cshtml"
     Write(WrapComment("/// ", property.Documentation.EscapeXmlComment()));


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("        ");

WriteLiteral("/// </summary>\n");


#line 171 "ModelTemplate.cshtml"
            if (property.ModelType.IsPrimaryType(KnownPrimaryType.Date))
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonConverter(typeof(DateJsonConverter))]\n");


#line 174 "ModelTemplate.cshtml"
            }
            if (property.ModelType.IsPrimaryType(KnownPrimaryType.DateTimeRfc1123))
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonConverter(typeof(DateTimeRfc1123JsonConverter))]\n");


#line 178 "ModelTemplate.cshtml"
            }
            if (property.ModelType.IsPrimaryType(KnownPrimaryType.Base64Url))
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonConverter(typeof(Base64UrlJsonConverter))]\n");


#line 182 "ModelTemplate.cshtml"
            }
            if (property.ModelType.IsPrimaryType(KnownPrimaryType.UnixTime))
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonConverter(typeof(UnixTimeJsonConverter))]\n");


#line 186 "ModelTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("[Newtonsoft.Json.JsonProperty(PropertyName = \"");


#line 187 "ModelTemplate.cshtml"
                                                   Write(property.SerializedName);


#line default
#line hidden
WriteLiteral("\")]\n");

WriteLiteral("        ");

WriteLiteral("public static ");


#line 188 "ModelTemplate.cshtml"
                   Write(property.ModelTypeName);


#line default
#line hidden
WriteLiteral(" ");


#line 188 "ModelTemplate.cshtml"
                                           Write(property.Name);


#line default
#line hidden
WriteLiteral(" { get; private set; }\n");


#line 189 "ModelTemplate.cshtml"
        

#line default
#line hidden

#line 189 "ModelTemplate.cshtml"
   Write(EmptyLine);


#line default
#line hidden

#line 189 "ModelTemplate.cshtml"
                  
        }


#line default
#line hidden

#line 191 "ModelTemplate.cshtml"
 if(@Model.ShouldValidateChain())
{



#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("public ");


#line 194 "ModelTemplate.cshtml"
            Write(Model.MethodQualifier);


#line default
#line hidden
WriteLiteral(" void Validate()\n");

WriteLiteral("        ");

WriteLiteral("{\n");


#line 196 "ModelTemplate.cshtml"
            bool anythingToValidate = false;

            if (Model.BaseModelType != null && Model.BaseModelType.ShouldValidateChain())
            {
                anythingToValidate = true;


#line default
#line hidden
WriteLiteral("            ");

WriteLiteral("base.Validate();\n");


#line 202 "ModelTemplate.cshtml"
            }

            foreach (PropertyCs property in Model.Properties.Where(p => p.IsRequired && !p.IsReadOnly && !p.IsConstant && p.IsNullable() ))
            {
                anythingToValidate = true;


#line default
#line hidden
WriteLiteral("            ");

WriteLiteral("if (");


#line 207 "ModelTemplate.cshtml"
             Write(property.Name);


#line default
#line hidden
WriteLiteral(" == null)\n");

WriteLiteral("            ");

WriteLiteral("{\n");

WriteLiteral("                ");

WriteLiteral("throw new System.Exception(\"Property \'");


#line 209 "ModelTemplate.cshtml"
                                                   Write(property.Name);


#line default
#line hidden
WriteLiteral("\' is required/\");\n");

WriteLiteral("            ");

WriteLiteral("}\n");

WriteLiteral("            ");

WriteLiteral("\n");


#line 212 "ModelTemplate.cshtml"
            }
            foreach (var property in Model.Properties.Where(p => !p.IsConstant 
                && (p.Constraints.Any() || !(p.ModelType is PrimaryType))))
            {
                anythingToValidate = true;


#line default
#line hidden
WriteLiteral("            ");


#line 217 "ModelTemplate.cshtml"
         Write(property.ModelType.ValidateType(Model, $"this.{property.Name}", property.Constraints));


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("            ");

WriteLiteral("\n");


#line 219 "ModelTemplate.cshtml"
            }
            if (!anythingToValidate)
            {


#line default
#line hidden
WriteLiteral("            ");

WriteLiteral("//Nothing to validate\n");


#line 223 "ModelTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("}\n");


#line 225 "ModelTemplate.cshtml"
}


#line default
#line hidden
WriteLiteral("\n");


#line 227 "ModelTemplate.cshtml"
    

#line default
#line hidden

#line 227 "ModelTemplate.cshtml"
     if (Model.CodeModel.ShouldGenerateXmlSerialization) {

#line default
#line hidden
WriteLiteral("\r\n        /// <summary>\r\n        /// Serializes the object to an XML node\r\n      " +
"  /// </summary>\r\n        internal System.Xml.Linq.XElement XmlSerialize(System." +
"Xml.Linq.XElement result)\r\n        {");

WriteLiteral("\r\n");


#line 233 "ModelTemplate.cshtml"
        foreach(var property in Model.Properties.Where(p => !p.IsConstant && !p.WasFlattened())) {

#line default
#line hidden
WriteLiteral("\r\n");


#line 234 "ModelTemplate.cshtml"
        

#line default
#line hidden

#line 234 "ModelTemplate.cshtml"
         if (property.IsNullable()) {

#line default
#line hidden
WriteLiteral("\r\n            if( null != ");


#line 235 "ModelTemplate.cshtml"
                    Write(property.Name);


#line default
#line hidden
WriteLiteral(" ) \r\n            {");


#line 236 "ModelTemplate.cshtml"
                    }


#line default
#line hidden
WriteLiteral("                ");


#line 237 "ModelTemplate.cshtml"
                 if (property.ModelType is CompositeType) {

#line default
#line hidden
WriteLiteral("\r\n                result.Add(");


#line 238 "ModelTemplate.cshtml"
                       Write(property.Name);


#line default
#line hidden
WriteLiteral(".XmlSerialize(new System.Xml.Linq.XElement( \"");


#line 238 "ModelTemplate.cshtml"
                                                                                    Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\" )));");

WriteLiteral("\n");


#line 239 "ModelTemplate.cshtml"
                }
                else if (property.ModelType is DictionaryType)
                {
                    var vt = ((DictionaryType)property.ModelType).ValueType;
                    if (vt is DictionaryType || vt is SequenceType)
                    {
                        // todo: nothing right now.
                    } else if (vt is CompositeType) {

#line default
#line hidden
WriteLiteral("\r\n                var dict = new System.Xml.Linq.XElement(\"");


#line 247 "ModelTemplate.cshtml"
                                                    Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\");\r\n                foreach( var key in ");


#line 248 "ModelTemplate.cshtml"
                                Write(property.Name);


#line default
#line hidden
WriteLiteral(".Keys ) {\r\n                    dict.Add(");


#line 249 "ModelTemplate.cshtml"
                         Write(property.Name);


#line default
#line hidden
WriteLiteral("[key].XmlSerialize(new System.Xml.Linq.XElement(key) ) );\r\n                }\r\n   " +
"             result.Add(dict);");

WriteLiteral("\r\n");


#line 252 "ModelTemplate.cshtml"
                } else {

#line default
#line hidden
WriteLiteral("\r\n                var dict = new System.Xml.Linq.XElement(\"");


#line 253 "ModelTemplate.cshtml"
                                                    Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\");\r\n                foreach( var key in ");


#line 254 "ModelTemplate.cshtml"
                                Write(property.Name);


#line default
#line hidden
WriteLiteral(".Keys ){\r\n                    dict.Add(new System.Xml.Linq.XElement( key, ");


#line 255 "ModelTemplate.cshtml"
                                                            Write(property.Name);


#line default
#line hidden
WriteLiteral("[key] ) );\r\n                }\r\n                result.Add(dict);");


#line 257 "ModelTemplate.cshtml"
                                        }
                }
                else if (property.ModelType is SequenceType)
                {
                    var et = ((SequenceType)property.ModelType).ElementType;
                    if (et is DictionaryType || et is SequenceType)
                    {
                        // todo: nothing right now.
                    } else if (et is CompositeType) {if ((property.ModelType as SequenceType).XmlIsWrapped) {

#line default
#line hidden
WriteLiteral("\r\n                var seq = new System.Xml.Linq.XElement(\"");


#line 266 "ModelTemplate.cshtml"
                                                   Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\");\r\n                foreach( var value in ");


#line 267 "ModelTemplate.cshtml"
                                  Write(property.Name);


#line default
#line hidden
WriteLiteral(" ){\r\n                    seq.Add(value.XmlSerialize( new System.Xml.Linq.XElement" +
"( \"");


#line 268 "ModelTemplate.cshtml"
                                                                           Write((property.ModelType as SequenceType).ElementXmlName);


#line default
#line hidden
WriteLiteral("\") ) );\r\n                }\r\n                result.Add(seq);");


#line 270 "ModelTemplate.cshtml"
                                       } 
                else {

#line default
#line hidden
WriteLiteral("\r\n                foreach( var value in ");


#line 272 "ModelTemplate.cshtml"
                                  Write(property.Name);


#line default
#line hidden
WriteLiteral(" ){\r\n                    result.Add(value.XmlSerialize( new System.Xml.Linq.XElem" +
"ent( \"");


#line 273 "ModelTemplate.cshtml"
                                                                             Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\") ) );\r\n                }");


#line 274 "ModelTemplate.cshtml"
                        }} else {if ((property.ModelType as SequenceType).XmlIsWrapped) {

#line default
#line hidden
WriteLiteral("\r\n                var seq = new System.Xml.Linq.XElement(\"");


#line 275 "ModelTemplate.cshtml"
                                                   Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\");\r\n                foreach( var value in ");


#line 276 "ModelTemplate.cshtml"
                                  Write(property.Name);


#line default
#line hidden
WriteLiteral(" ){\r\n                    seq.Add(new System.Xml.Linq.XElement( \"");


#line 277 "ModelTemplate.cshtml"
                                                       Write((property.ModelType as SequenceType).ElementXmlName);


#line default
#line hidden
WriteLiteral("\", value ) );\r\n                }\n                result.Add(seq);");


#line 279 "ModelTemplate.cshtml"
                                       } 
                else {

#line default
#line hidden
WriteLiteral("\r\n                foreach( var value in ");


#line 281 "ModelTemplate.cshtml"
                                  Write(property.Name);


#line default
#line hidden
WriteLiteral(" ){\r\n                    result.Add(new System.Xml.Linq.XElement( \"");


#line 282 "ModelTemplate.cshtml"
                                                         Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\", value ) );\r\n                }");


#line 283 "ModelTemplate.cshtml"
                        }}
                } else if (property.ModelType is EnumType && !((EnumType)property.ModelType).ModelAsString) {
                    // serialize it as a enum type.
                    if (property.XmlIsAttribute) {

#line default
#line hidden
WriteLiteral("\n                result.Add(new System.Xml.Linq.XAttribute(\"");


#line 287 "ModelTemplate.cshtml"
                                                      Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\", ");


#line 287 "ModelTemplate.cshtml"
                                                                           Write(property.Name);


#line default
#line hidden
WriteLiteral(".ToSerializedValue()) );");

WriteLiteral("\n");


#line 288 "ModelTemplate.cshtml"
                    } else {

#line default
#line hidden
WriteLiteral("\n                result.Add(new System.Xml.Linq.XElement(\"");


#line 289 "ModelTemplate.cshtml"
                                                    Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\", ");


#line 289 "ModelTemplate.cshtml"
                                                                         Write(property.Name);


#line default
#line hidden
WriteLiteral(".ToSerializedValue()) );");

WriteLiteral("\n");


#line 290 "ModelTemplate.cshtml"
                    }
                } else {
                    // serialize it as a primitive/value type.
                    var primitiveExpression = property.Name;
                    var knownType = (property.ModelType as PrimaryType)?.KnownPrimaryType;
                    if (knownType == KnownPrimaryType.DateTimeRfc1123)
                    {
                        primitiveExpression = property.IsNullable()
                            ? $"{primitiveExpression}?.ToUniversalTime().ToString(\"R\")"
                            : $"{primitiveExpression}.ToUniversalTime().ToString(\"R\")";
                    }
                    if (property.XmlIsAttribute) {

#line default
#line hidden
WriteLiteral("\r\n                result.Add(new System.Xml.Linq.XAttribute(\"");


#line 302 "ModelTemplate.cshtml"
                                                      Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\", ");


#line 302 "ModelTemplate.cshtml"
                                                                           Write(primitiveExpression);


#line default
#line hidden
WriteLiteral(") );");

WriteLiteral("\n");


#line 303 "ModelTemplate.cshtml"
                    } else {

#line default
#line hidden
WriteLiteral("\n                result.Add(new System.Xml.Linq.XElement(\"");


#line 304 "ModelTemplate.cshtml"
                                                    Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\", ");


#line 304 "ModelTemplate.cshtml"
                                                                         Write(primitiveExpression);


#line default
#line hidden
WriteLiteral(") );");

WriteLiteral("\n");


#line 305 "ModelTemplate.cshtml"
                    }
                }


#line default
#line hidden
WriteLiteral("        ");


#line 307 "ModelTemplate.cshtml"
         if (property.IsNullable()) {

#line default
#line hidden
WriteLiteral("\r\n            }\r\n        ");


#line 309 "ModelTemplate.cshtml"
               }


#line default
#line hidden
WriteLiteral("    ");


#line 310 "ModelTemplate.cshtml"
           }


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("\r\n            return result;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Des" +
"erializes an XML node to an instance of ");


#line 316 "ModelTemplate.cshtml"
                                                  Write(Model.Name);


#line default
#line hidden
WriteLiteral("\r\n        /// </summary>\n        internal static ");


#line 318 "ModelTemplate.cshtml"
                   Write(Model.Name);


#line default
#line hidden
WriteLiteral(" XmlDeserialize(string payload) \n        {\n            // deserialize to xml and " +
"use the overload to do the work\n            return XmlDeserialize( System.Xml.Li" +
"nq.XElement.Parse( payload ) );\n        }    \n\n        internal static ");


#line 324 "ModelTemplate.cshtml"
                   Write(Model.Name);


#line default
#line hidden
WriteLiteral(" XmlDeserialize(System.Xml.Linq.XElement payload) \n        {\n            var resu" +
"lt = new ");


#line 326 "ModelTemplate.cshtml"
                         Write(Model.Name);


#line default
#line hidden
WriteLiteral("();\n");


#line 327 "ModelTemplate.cshtml"
        

#line default
#line hidden

#line 327 "ModelTemplate.cshtml"
         if (Model.Properties.Any(p => !p.IsConstant && !p.WasFlattened() && p.XmlIsAttribute)) {

#line default
#line hidden
WriteLiteral("\r\n            System.Xml.Linq.XAttribute attribute;");

WriteLiteral("\n");


#line 329 "ModelTemplate.cshtml"
        }
        

#line default
#line hidden

#line 332 "ModelTemplate.cshtml"
           


#line default
#line hidden
WriteLiteral("\n");


#line 334 "ModelTemplate.cshtml"
        

#line default
#line hidden

#line 334 "ModelTemplate.cshtml"
         foreach(var property in Model.Properties.Where(p => !p.IsConstant && !p.WasFlattened())) {
            if (property.XmlIsAttribute) {

#line default
#line hidden
WriteLiteral("\r\n            if( null != (attribute = payload.Attribute(\"");


#line 336 "ModelTemplate.cshtml"
                                                   Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\")))\r\n            {\r\n");


#line 338 "ModelTemplate.cshtml"
                

#line default
#line hidden

#line 338 "ModelTemplate.cshtml"
                 if (property.ModelType is EnumType && !((EnumType)property.ModelType).ModelAsString) {

#line default
#line hidden
WriteLiteral("\r\n                \r\n                result.");


#line 340 "ModelTemplate.cshtml"
                   Write(property.Name);


#line default
#line hidden
WriteLiteral(" =attribute.Value.Parse");


#line 340 "ModelTemplate.cshtml"
                                                          Write(property.ModelType.Name);


#line default
#line hidden
WriteLiteral("();\r\n                \r\n                ");


#line 342 "ModelTemplate.cshtml"
                       } else {

#line default
#line hidden
WriteLiteral(" \r\n                result.");


#line 343 "ModelTemplate.cshtml"
                   Write(property.Name);


#line default
#line hidden
WriteLiteral(" = (");


#line 343 "ModelTemplate.cshtml"
                                      Write(property.ModelTypeName);


#line default
#line hidden
WriteLiteral(")attribute;\r\n                ");


#line 344 "ModelTemplate.cshtml"
                       }


#line default
#line hidden
WriteLiteral("            }\r\n            ");

WriteLiteral("\n");


#line 347 "ModelTemplate.cshtml"
                continue;
            }
            
            var deserializerName = $"deserialize{property.Name}";
            var resultName = $"result{property.Name}";



#line default
#line hidden
WriteLiteral("            ");

WriteLiteral("\r\n            var ");


#line 354 "ModelTemplate.cshtml"
            Write(deserializerName);


#line default
#line hidden
WriteLiteral(" = (XmlSerialization.GenerateDeserializer(Model.CodeModel, property.ModelType, pr" +
"operty.ModelTypeName));\r\n");

WriteLiteral("            ");


#line 355 "ModelTemplate.cshtml"
       Write(property.ModelTypeName);


#line default
#line hidden
WriteLiteral(" ");


#line 355 "ModelTemplate.cshtml"
                                Write(resultName);


#line default
#line hidden
WriteLiteral(";\r\n            if (");


#line 356 "ModelTemplate.cshtml"
            Write(deserializerName);


#line default
#line hidden
WriteLiteral("(payload, \"");


#line 356 "ModelTemplate.cshtml"
                                         Write(property.XmlName);


#line default
#line hidden
WriteLiteral("\", out ");


#line 356 "ModelTemplate.cshtml"
                                                                  Write(resultName);


#line default
#line hidden
WriteLiteral("))\r\n            {\r\n                result.");


#line 358 "ModelTemplate.cshtml"
                   Write(property.Name);


#line default
#line hidden
WriteLiteral(" = ");


#line 358 "ModelTemplate.cshtml"
                                      Write(resultName);


#line default
#line hidden
WriteLiteral(";\r\n            }");

WriteLiteral("\n");


#line 360 "ModelTemplate.cshtml"
        }


#line default
#line hidden
WriteLiteral("            return result;\n        } \n    ");


#line 363 "ModelTemplate.cshtml"
           }


#line default
#line hidden
WriteLiteral("    \n    }\n}\n");

}
}
}
#pragma warning restore 1591
