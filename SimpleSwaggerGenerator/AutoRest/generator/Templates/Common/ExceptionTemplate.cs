#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace AutoRest.CSharp.Templates.Rest.Common
{
using System;
using System.Collections.Generic;

#line 2 "ExceptionTemplate.cshtml"
using System.Linq;

#line default
#line hidden
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class ExeptionsTemplate : AutoRest.Core.Template<AutoRest.CSharp.Model.CompositeTypeCs>
{

#line hidden

public override void Execute()
{

#line 4 "ExceptionTemplate.cshtml"
Write(Header("// "));


#line default
#line hidden
WriteLiteral("\n");


#line 5 "ExceptionTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\nnamespace ");


#line 6 "ExceptionTemplate.cshtml"
      Write(Settings.Namespace);


#line default
#line hidden
WriteLiteral(".");


#line 6 "ExceptionTemplate.cshtml"
                            Write(Settings.ModelsName);


#line default
#line hidden
WriteLiteral("\n{\n");


#line 8 "ExceptionTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n    /// <summary>\n");

WriteLiteral("    ");


#line 10 "ExceptionTemplate.cshtml"
Write(WrapComment("/// ", "Exception thrown for an invalid response with " + Model.Name + " information."));


#line default
#line hidden
WriteLiteral("\n    /// </summary>\n#if !PORTABLE \n    [System.Serializable]\n#endif\n    public cl" +
"ass ");


#line 15 "ExceptionTemplate.cshtml"
            Write(Model.ExceptionTypeDefinitionName);


#line default
#line hidden
WriteLiteral(" : Microsoft.Rest.RestException\n    {\n        /// <summary>\n        /// Gets info" +
"rmation about the associated HTTP request.\n        /// </summary>\n        public" +
" Microsoft.Rest.HttpRequestMessageWrapper Request { get; set; }\n");


#line 21 "ExceptionTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n        /// <summary>\n        /// Gets information about the associated HTTP res" +
"ponse.\n        /// </summary>\n        public Microsoft.Rest.HttpResponseMessageW" +
"rapper Response { get; set; }\n");


#line 26 "ExceptionTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n        /// <summary>\n        /// Gets or sets the body object.\n        /// </su" +
"mmary>\n        public ");


#line 30 "ExceptionTemplate.cshtml"
          Write(Model.Name);


#line default
#line hidden
WriteLiteral(" Body { get; set; }\n");


#line 31 "ExceptionTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n        /// <summary>\n        /// Initializes a new instance of the ");


#line 33 "ExceptionTemplate.cshtml"
                                         Write(Model.ExceptionTypeDefinitionName);


#line default
#line hidden
WriteLiteral(" class.\n        /// </summary>\n        public ");


#line 35 "ExceptionTemplate.cshtml"
           Write(@Model.ExceptionTypeDefinitionName);


#line default
#line hidden
WriteLiteral("()\n        {\n        }\n");


#line 38 "ExceptionTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n        /// <summary>\n        /// Initializes a new instance of the ");


#line 40 "ExceptionTemplate.cshtml"
                                         Write(Model.ExceptionTypeDefinitionName);


#line default
#line hidden
WriteLiteral(" class.\n        /// </summary>\n        /// <param");

WriteLiteral(" name=\"message\"");

WriteLiteral(">The exception message.</param>\n        public ");


#line 43 "ExceptionTemplate.cshtml"
           Write(Model.ExceptionTypeDefinitionName);


#line default
#line hidden
WriteLiteral("(string message)\n            : this(message, null)\n        {\n        }\n");


#line 47 "ExceptionTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n        /// <summary>\n        /// Initializes a new instance of the ");


#line 49 "ExceptionTemplate.cshtml"
                                         Write(Model.ExceptionTypeDefinitionName);


#line default
#line hidden
WriteLiteral(" class.\n        /// </summary>\n        /// <param");

WriteLiteral(" name=\"message\"");

WriteLiteral(">The exception message.</param>\n        /// <param");

WriteLiteral(" name=\"innerException\"");

WriteLiteral(">Inner exception.</param>\n        public ");


#line 53 "ExceptionTemplate.cshtml"
           Write(Model.ExceptionTypeDefinitionName);


#line default
#line hidden
WriteLiteral("(string message, System.Exception innerException)\n            : base(message, inn" +
"erException)\n        {\n        }\n");


#line 57 "ExceptionTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n#if !PORTABLE \n        /// <summary>\n        /// Initializes a new instance of t" +
"he ");


#line 60 "ExceptionTemplate.cshtml"
                                         Write(Model.ExceptionTypeDefinitionName);


#line default
#line hidden
WriteLiteral(" class.\n        /// </summary>\n        /// <param");

WriteLiteral(" name=\"info\"");

WriteLiteral(">Serialization info.</param>\n        /// <param");

WriteLiteral(" name=\"context\"");

WriteLiteral(">Streaming context.</param>\n        protected ");


#line 64 "ExceptionTemplate.cshtml"
              Write(Model.ExceptionTypeDefinitionName);


#line default
#line hidden
WriteLiteral("(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serializatio" +
"n.StreamingContext context)\n            : base(info, context)\n        {\n        " +
"}\n");


#line 68 "ExceptionTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n        /// <summary>\n        /// Serializes content of the exception.\n        /" +
"// </summary>\n        /// <param");

WriteLiteral(" name=\"info\"");

WriteLiteral(">Serialization info.</param>\n        /// <param");

WriteLiteral(" name=\"context\"");

WriteLiteral(">Streaming context.</param>\n        /// <exception");

WriteLiteral(" cref=\"System.ArgumentNullException\"");

WriteLiteral(@">
        /// Thrown when a required parameter is null
        /// </exception>
        [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand, SerializationFormatter = true)]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            base.GetObjectData(info, context);
            if (info == null)
            {
                throw new System.ArgumentNullException(""info"");
            }
");


#line 85 "ExceptionTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n            info.AddValue(\"Request\", Request);\n            info.AddValue(\"Respon" +
"se\", Response);\n            info.AddValue(\"Body\", Body);\n        }\n#endif\n    }\n" +
"}\n");

}
}
}
#pragma warning restore 1591
