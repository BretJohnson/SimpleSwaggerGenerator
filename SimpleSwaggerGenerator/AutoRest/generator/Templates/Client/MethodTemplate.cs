#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace AutoRest.CSharp.Templates.Rest.Client
{

#line 4 "MethodTemplate.cshtml"
using System;

#line default
#line hidden
using System.Collections.Generic;

#line 3 "MethodTemplate.cshtml"
using System.Linq;

#line default
#line hidden
using System.Text;

#line 2 "MethodTemplate.cshtml"
using System.Globalization;

#line default
#line hidden

#line 5 "MethodTemplate.cshtml"
using AutoRest.Core.Model;

#line default
#line hidden

#line 6 "MethodTemplate.cshtml"
using AutoRest.Core.Utilities;

#line default
#line hidden

#line 7 "MethodTemplate.cshtml"
using AutoRest.CSharp;

#line default
#line hidden

#line 8 "MethodTemplate.cshtml"
using AutoRest.CSharp.Model;

#line default
#line hidden

#line 9 "MethodTemplate.cshtml"
using AutoRest.Extensions;

#line default
#line hidden

#line 10 "MethodTemplate.cshtml"
using System.Xml;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class MethodTemplate : AutoRest.Core.Template<AutoRest.CSharp.Model.MethodCs>
{

#line hidden

public override void Execute()
{

#line 13 "MethodTemplate.cshtml"
 if (!string.IsNullOrWhiteSpace(Model.Description) || !string.IsNullOrEmpty(Model.Summary))
{


#line default
#line hidden
WriteLiteral("/// <summary>\n");


#line 16 "MethodTemplate.cshtml"
Write(WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment()));


#line default
#line hidden
WriteLiteral("\n");


#line 17 "MethodTemplate.cshtml"
    if (!string.IsNullOrEmpty(Model.ExternalDocsUrl))
    {


#line default
#line hidden
WriteLiteral("/// <see href=\"");


#line 19 "MethodTemplate.cshtml"
            Write(Model.ExternalDocsUrl);


#line default
#line hidden
WriteLiteral("\" />\n");


#line 20 "MethodTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("/// </summary>\n");


#line 22 "MethodTemplate.cshtml"
}


#line default
#line hidden

#line 23 "MethodTemplate.cshtml"
 if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{


#line default
#line hidden
WriteLiteral("/// <remarks>\n");


#line 26 "MethodTemplate.cshtml"
Write(WrapComment("/// ", Model.Description.EscapeXmlComment()));


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("/// </remarks>\n");


#line 28 "MethodTemplate.cshtml"
}


#line default
#line hidden

#line 29 "MethodTemplate.cshtml"
 foreach (var parameter in Model.LocalParameters)
{


#line default
#line hidden
WriteLiteral("/// <param name=\'");


#line 31 "MethodTemplate.cshtml"
              Write(parameter.Name);


#line default
#line hidden
WriteLiteral("\'>\n");


#line 32 "MethodTemplate.cshtml"


#line default
#line hidden

#line 32 "MethodTemplate.cshtml"
Write(WrapComment("/// ", parameter.Documentation.EscapeXmlComment()));


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("/// </param>\n");


#line 34 "MethodTemplate.cshtml"
}


#line default
#line hidden
WriteLiteral("/// <param");

WriteLiteral(" name=\'customHeaders\'");

WriteLiteral(">\n/// Headers that will be added to request.\n/// </param>\n/// <param");

WriteLiteral(" name=\'cancellationToken\'");

WriteLiteral(">\n/// The cancellation token.\n/// </param>\n/// Thrown when the operation returned" +
" an invalid status code\n/// </exception>\n");


#line 43 "MethodTemplate.cshtml"
 if (Model.Responses.Where(r => r.Value.Body != null).Any())
{


#line default
#line hidden
WriteLiteral("/// <exception cref=\"Microsoft.Rest.SerializationException\">\n");

WriteLiteral("/// Thrown when unable to deserialize the response\n");

WriteLiteral("/// </exception>\n");


#line 48 "MethodTemplate.cshtml"
}


#line default
#line hidden

#line 49 "MethodTemplate.cshtml"
 if (Model.Parameters.Cast<ParameterCs>().Any(p => !p.IsConstant && p.IsRequired &&p.IsNullable()))
{


#line default
#line hidden
WriteLiteral("/// <exception cref=\"Microsoft.Rest.ValidationException\">\n");

WriteLiteral("/// Thrown when a required parameter is null\n");

WriteLiteral("/// </exception>\n");

WriteLiteral("/// <exception cref=\"System.ArgumentNullException\">\n");

WriteLiteral("/// Thrown when a required parameter is null\n");

WriteLiteral("/// </exception>\n");


#line 57 "MethodTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("/// <return>\n/// A response object containing the response body and response head" +
"ers.\n/// </return>\n");


#line 61 "MethodTemplate.cshtml"
 if (Model.Deprecated)
{


#line default
#line hidden
WriteLiteral("[System.Obsolete()]\n");


#line 64 "MethodTemplate.cshtml"
}


#line default
#line hidden
WriteLiteral("public async System.Threading.Tasks.Task<");


#line 65 "MethodTemplate.cshtml"
                                     Write(Model.OperationResponseReturnTypeString);


#line default
#line hidden
WriteLiteral("> ");


#line 65 "MethodTemplate.cshtml"
                                                                                 Write(Model.Name);


#line default
#line hidden
WriteLiteral("WithHttpMessagesAsync(");


#line 65 "MethodTemplate.cshtml"
                                                                                                                    Write(Model.GetAsyncMethodParameterDeclaration(true));


#line default
#line hidden
WriteLiteral(")\n{\n");


#line 67 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 67 "MethodTemplate.cshtml"
     foreach (ParameterCs parameter in Model.Parameters.Where(p => !p.IsConstant))
    {
        if (parameter.IsRequired && parameter.IsNullable())
        {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("if (");


#line 71 "MethodTemplate.cshtml"
      Write(parameter.Name);


#line default
#line hidden
WriteLiteral(" == null)\n");

WriteLiteral("    ");

WriteLiteral("{\n");

WriteLiteral("        ");

WriteLiteral("throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Canno" +
"tBeNull, \"");


#line 73 "MethodTemplate.cshtml"
                                                                                                 Write(parameter.Name);


#line default
#line hidden
WriteLiteral("\");\n");

WriteLiteral("    ");

WriteLiteral("}\n");

WriteLiteral("\n");


#line 76 "MethodTemplate.cshtml"
        }
        if(parameter.CanBeValidated  && (Model.HttpMethod != HttpMethod.Patch || parameter.Location != ParameterLocation.Body))
        {


#line default
#line hidden
WriteLiteral("    ");


#line 79 "MethodTemplate.cshtml"
  Write(parameter.ModelType.ValidateType(Model, parameter.Name, parameter.Constraints));


#line default
#line hidden
WriteLiteral("\n");


#line 80 "MethodTemplate.cshtml"
        }
    }


#line default
#line hidden
WriteLiteral("\n");


#line 83 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 83 "MethodTemplate.cshtml"
     foreach (ParameterCs parameter in Model.Parameters)
    {
        if (parameter.IsConstant && !parameter.IsClientProperty)
        {


#line default
#line hidden
WriteLiteral("    ");


#line 87 "MethodTemplate.cshtml"
  Write(parameter.ModelTypeName);


#line default
#line hidden
WriteLiteral(" ");


#line 87 "MethodTemplate.cshtml"
                             Write(parameter.Name);


#line default
#line hidden
WriteLiteral(" = ");


#line 87 "MethodTemplate.cshtml"
                                                 Write(parameter.DefaultValue);


#line default
#line hidden
WriteLiteral(";\n");


#line 88 "MethodTemplate.cshtml"
        }

        if (parameter.ModelType is CompositeType
            && !parameter.IsConstant
            && parameter.IsRequired
            && !parameter.IsClientProperty
            && ((CompositeType)parameter.ModelType).ContainsConstantProperties)
        {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("if (");


#line 96 "MethodTemplate.cshtml"
      Write(parameter.Name);


#line default
#line hidden
WriteLiteral(" == null)\n");

WriteLiteral("    ");

WriteLiteral("{\n");

WriteLiteral("    ");

WriteLiteral("    ");


#line 98 "MethodTemplate.cshtml"
      Write(parameter.Name);


#line default
#line hidden
WriteLiteral(" = new ");


#line 98 "MethodTemplate.cshtml"
                              Write(parameter.ModelTypeName);


#line default
#line hidden
WriteLiteral("();\n");

WriteLiteral("    ");

WriteLiteral("}\n");


#line 100 "MethodTemplate.cshtml"
        }

    }


#line default
#line hidden
WriteLiteral("    ");


#line 103 "MethodTemplate.cshtml"
Write(Model.BuildInputMappings());


#line default
#line hidden
WriteLiteral(@"
    // Tracing
    bool _shouldTrace = Microsoft.Rest.ServiceClientTracing.IsEnabled;
    string _invocationId = null;
    if (_shouldTrace)
    {
        _invocationId = Microsoft.Rest.ServiceClientTracing.NextInvocationId.ToString();
        System.Collections.Generic.Dictionary<string, object> tracingParameters = new System.Collections.Generic.Dictionary<string, object>();
");


#line 111 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 111 "MethodTemplate.cshtml"
     foreach (var parameter in Model.LogicalParameters.Where(p => !p.IsClientProperty))
    {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("tracingParameters.Add(\"");


#line 113 "MethodTemplate.cshtml"
                             Write(parameter.Name);


#line default
#line hidden
WriteLiteral("\", ");


#line 113 "MethodTemplate.cshtml"
                                                 Write(parameter.Name);


#line default
#line hidden
WriteLiteral(");\n");


#line 114 "MethodTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("        tracingParameters.Add(\"cancellationToken\", cancellationToken);\n        Mi" +
"crosoft.Rest.ServiceClientTracing.Enter(_invocationId, this, \"");


#line 116 "MethodTemplate.cshtml"
                                                                    Write(Model.Name);


#line default
#line hidden
WriteLiteral("\", tracingParameters);\n    }\n\n    // Construct URL\n");


#line 120 "MethodTemplate.cshtml"
 if (Model.IsAbsoluteUrl)
{


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("string _url = \"");


#line 122 "MethodTemplate.cshtml"
                 Write(Model.Url);


#line default
#line hidden
WriteLiteral("\";\n");


#line 123 "MethodTemplate.cshtml"
}
else
{
if (Model.IsCustomBaseUri)
{


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("var _baseUrl = ");


#line 128 "MethodTemplate.cshtml"
                 Write(Model.ClientReference);


#line default
#line hidden
WriteLiteral(".BaseUri;\n");

WriteLiteral("    ");

WriteLiteral("var _url = _baseUrl + (_baseUrl.EndsWith(\"/\") ? \"\" : \"/\") + \"");


#line 129 "MethodTemplate.cshtml"
                                                               Write(Model.Url.TrimStart('/'));


#line default
#line hidden
WriteLiteral("\";\n");


#line 130 "MethodTemplate.cshtml"
}
else
{


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("var _baseUrl = ");


#line 133 "MethodTemplate.cshtml"
                 Write(Model.ClientReference);


#line default
#line hidden
WriteLiteral(".BaseUri.AbsoluteUri;\n");

WriteLiteral("    ");

WriteLiteral("var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith(\"/\") ? \"\" " +
": \"/\")), \"");


#line 134 "MethodTemplate.cshtml"
                                                                                             Write(Model.Url.TrimStart('/'));


#line default
#line hidden
WriteLiteral("\").ToString();\n");


#line 135 "MethodTemplate.cshtml"
}    
}


#line default
#line hidden
WriteLiteral("    ");


#line 137 "MethodTemplate.cshtml"
Write(Model.BuildUrl("_url"));


#line default
#line hidden
WriteLiteral("\n    // Create HTTP transport objects\n    var _httpRequest = new System.Net.Http." +
"HttpRequestMessage();\n    System.Net.Http.HttpResponseMessage _httpResponse = nu" +
"ll;\n\n    _httpRequest.Method = new System.Net.Http.HttpMethod(\"");


#line 142 "MethodTemplate.cshtml"
                                                      Write(Model.HttpMethod.ToString().ToUpper());


#line default
#line hidden
WriteLiteral("\");\n    _httpRequest.RequestUri = new System.Uri(_url);\n    // Set Headers\n");

WriteLiteral("    ");


#line 145 "MethodTemplate.cshtml"
Write(Model.SetDefaultHeaders);


#line default
#line hidden
WriteLiteral("\n");


#line 146 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 146 "MethodTemplate.cshtml"
     foreach (var parameter in Model.LogicalParameters.OfType<ParameterCs>().Where(p => p.Location == ParameterLocation.Header && !p.IsHeaderCollection))
    {
        if (!parameter.IsNullable())
        {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("if (_httpRequest.Headers.Contains(\"");


#line 150 "MethodTemplate.cshtml"
                                     Write(parameter.SerializedName);


#line default
#line hidden
WriteLiteral("\"))\n");

WriteLiteral("    ");

WriteLiteral("{\n");

WriteLiteral("    ");

WriteLiteral("    _httpRequest.Headers.Remove(\"");


#line 152 "MethodTemplate.cshtml"
                                   Write(parameter.SerializedName);


#line default
#line hidden
WriteLiteral("\");\n");

WriteLiteral("    ");

WriteLiteral("}\n");

WriteLiteral("    ");

WriteLiteral("_httpRequest.Headers.TryAddWithoutValidation(\"");


#line 154 "MethodTemplate.cshtml"
                                                Write(parameter.SerializedName);


#line default
#line hidden
WriteLiteral("\", ");


#line 154 "MethodTemplate.cshtml"
                                                                             Write(parameter.ModelType.ToString(Model.ClientReference, parameter.Name));


#line default
#line hidden
WriteLiteral(");\n");


#line 155 "MethodTemplate.cshtml"
        }
        else
        {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("if (");


#line 158 "MethodTemplate.cshtml"
      Write(parameter.Name);


#line default
#line hidden
WriteLiteral(" != null)\n");

WriteLiteral("    ");

WriteLiteral("{\n");

WriteLiteral("    ");

WriteLiteral("    if (_httpRequest.Headers.Contains(\"");


#line 160 "MethodTemplate.cshtml"
                                         Write(parameter.SerializedName);


#line default
#line hidden
WriteLiteral("\"))\n");

WriteLiteral("    ");

WriteLiteral("    {\n");

WriteLiteral("    ");

WriteLiteral("        _httpRequest.Headers.Remove(\"");


#line 162 "MethodTemplate.cshtml"
                                       Write(parameter.SerializedName);


#line default
#line hidden
WriteLiteral("\");\n");

WriteLiteral("    ");

WriteLiteral("    }\n");

WriteLiteral("    ");

WriteLiteral("    _httpRequest.Headers.TryAddWithoutValidation(\"");


#line 164 "MethodTemplate.cshtml"
                                                    Write(parameter.SerializedName);


#line default
#line hidden
WriteLiteral("\", ");


#line 164 "MethodTemplate.cshtml"
                                                                                 Write(parameter.ModelType.ToString(Model.ClientReference, parameter.Name));


#line default
#line hidden
WriteLiteral(");\n");

WriteLiteral("    ");

WriteLiteral("}\n");


#line 166 "MethodTemplate.cshtml"
        }
    }


#line default
#line hidden
WriteLiteral("    ");


#line 168 "MethodTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n");


#line 169 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 169 "MethodTemplate.cshtml"
     foreach (var parameter in Model.LogicalParameters.OfType<ParameterCs>().Where(p => p.Location == ParameterLocation.Header && p.IsHeaderCollection))
    {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("if (");


#line 171 "MethodTemplate.cshtml"
      Write(parameter.Name);


#line default
#line hidden
WriteLiteral(" != null)\n");

WriteLiteral("    ");

WriteLiteral("{\n");

WriteLiteral("    ");

WriteLiteral("    foreach (var _header in ");


#line 173 "MethodTemplate.cshtml"
                              Write(parameter.Name);


#line default
#line hidden
WriteLiteral(")\n");

WriteLiteral("    ");

WriteLiteral("    {\n");

WriteLiteral("    ");

WriteLiteral("        var key = \"");


#line 175 "MethodTemplate.cshtml"
                     Write(parameter.HeaderCollectionPrefix);


#line default
#line hidden
WriteLiteral("\" + _header.Key;\n");

WriteLiteral("    ");

WriteLiteral("        if (_httpRequest.Headers.Contains(key))\n");

WriteLiteral("    ");

WriteLiteral("        {\n");

WriteLiteral("    ");

WriteLiteral("            _httpRequest.Headers.Remove(key);\n");

WriteLiteral("    ");

WriteLiteral("        }\n");

WriteLiteral("    ");

WriteLiteral("        _httpRequest.Headers.TryAddWithoutValidation(key, _header.Value);\n");

WriteLiteral("    ");

WriteLiteral("    }\n");

WriteLiteral("    ");

WriteLiteral("}\n");


#line 183 "MethodTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("    ");


#line 184 "MethodTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral(@"
    if (customHeaders != null)
    {
        foreach(var _header in customHeaders)
        {
            if (_httpRequest.Headers.Contains(_header.Key))
            {
                _httpRequest.Headers.Remove(_header.Key);
            }
            _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
        }
    }
");

WriteLiteral("    ");


#line 196 "MethodTemplate.cshtml"
Write(EmptyLine);


#line default
#line hidden
WriteLiteral("\n\n    // Serialize Request\n    string _requestContent = null;\n");


#line 200 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 200 "MethodTemplate.cshtml"
     if (Model.RequestBody != null)
    {
        if (Model.RequestBody.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
        {
            if (Model.RequestBody.IsRequired)
            {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("if(");


#line 206 "MethodTemplate.cshtml"
     Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(" == null)\n");

WriteLiteral("    ");

WriteLiteral("{\n");

WriteLiteral("    ");

WriteLiteral("  throw new System.ArgumentNullException(\"");


#line 208 "MethodTemplate.cshtml"
                                            Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral("\");\n");

WriteLiteral("    ");

WriteLiteral("}\n");


#line 210 "MethodTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("\n    if (");


#line 212 "MethodTemplate.cshtml"
    Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(" != null && ");


#line 212 "MethodTemplate.cshtml"
                                         Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(" != System.IO.Stream.Null)\n    {\n      _httpRequest.Content = new System.Net.Http" +
".StreamContent(");


#line 214 "MethodTemplate.cshtml"
                                                           Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(");\n      _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaT" +
"ypeHeaderValue.Parse(\"");


#line 215 "MethodTemplate.cshtml"
                                                                                                Write(Model.RequestContentType);


#line default
#line hidden
WriteLiteral("\");\n    }\n        ");

WriteLiteral("\n");


#line 218 "MethodTemplate.cshtml"
        }
        else
        {
            if (Model.RequestContentType.StartsWith("application/xml"))
            {
                if (!Model.RequestBody.IsNullable()) {
                    if (Model.RequestBody.ModelType is SequenceType && (Model.RequestBody.ModelType as SequenceType).ElementType is CompositeType)
                    { // for primitive sequences for now


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("_requestContent = new System.Xml.Linq.XElement(\"");


#line 226 "MethodTemplate.cshtml"
                                                 Write(Model.RequestBody.ModelType.XmlName);


#line default
#line hidden
WriteLiteral("\", System.Linq.Enumerable.Select(");


#line 226 "MethodTemplate.cshtml"
                                                                                                                       Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(", x => x.XmlSerialize(new System.Xml.Linq.XElement(\"");


#line 226 "MethodTemplate.cshtml"
                                                                                                                                                                                                    Write((Model.RequestBody.ModelType as SequenceType).ElementXmlName);


#line default
#line hidden
WriteLiteral("\")))).ToString();\n");


#line 227 "MethodTemplate.cshtml"
                    }
                    else if (Model.RequestBody.ModelType is SequenceType)
                    { // for primitive sequences for now


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("_requestContent = new System.Xml.Linq.XElement(\"");


#line 230 "MethodTemplate.cshtml"
                                                 Write(Model.RequestBody.ModelType.XmlName);


#line default
#line hidden
WriteLiteral("\", System.Linq.Enumerable.Select(");


#line 230 "MethodTemplate.cshtml"
                                                                                                                       Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(", x => new System.Xml.Linq.XElement(\"");


#line 230 "MethodTemplate.cshtml"
                                                                                                                                                                                     Write((Model.RequestBody.ModelType as SequenceType).ElementXmlName);


#line default
#line hidden
WriteLiteral("\", x))).ToString();\n");


#line 231 "MethodTemplate.cshtml"
                    }
                    else
                    {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("_requestContent = ");


#line 234 "MethodTemplate.cshtml"
                    Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(".XmlSerialize( new System.Xml.Linq.XElement(\"");


#line 234 "MethodTemplate.cshtml"
                                                                                         Write(Model.RequestBody.ModelType.XmlName);


#line default
#line hidden
WriteLiteral("\") ).ToString(); \n");

WriteLiteral("    ");

WriteLiteral("_requestContent = $\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n{_requestContent" +
"}\";\n");


#line 236 "MethodTemplate.cshtml"
                    }


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("_httpRequest.Content = new System.Net.Http.StringContent(_requestContent, System." +
"Text.Encoding.UTF8);\n");

WriteLiteral("    ");

WriteLiteral("_httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeader" +
"Value.Parse(\"");


#line 238 "MethodTemplate.cshtml"
                                                                                                Write(Model.RequestContentType);


#line default
#line hidden
WriteLiteral("\");\n");


#line 239 "MethodTemplate.cshtml"
                }
                else {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("if(");


#line 241 "MethodTemplate.cshtml"
     Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(" != null)\n");

WriteLiteral("    ");

WriteLiteral("{\n");


#line 243 "MethodTemplate.cshtml"
                    if (Model.RequestBody.ModelType is SequenceType && (Model.RequestBody.ModelType as SequenceType).ElementType is CompositeType)
                    { // for primitive sequences for now


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("_requestContent = new System.Xml.Linq.XElement(\"");


#line 245 "MethodTemplate.cshtml"
                                                     Write(Model.RequestBody.ModelType.XmlName);


#line default
#line hidden
WriteLiteral("\", System.Linq.Enumerable.Select(");


#line 245 "MethodTemplate.cshtml"
                                                                                                                           Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(", x => x.XmlSerialize(new System.Xml.Linq.XElement(\"");


#line 245 "MethodTemplate.cshtml"
                                                                                                                                                                                                        Write((Model.RequestBody.ModelType as SequenceType).ElementXmlName);


#line default
#line hidden
WriteLiteral("\")))).ToString();\n");


#line 246 "MethodTemplate.cshtml"
                    }
                    else if (Model.RequestBody.ModelType is SequenceType)
                    { // for primitive sequences for now


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("_requestContent = new System.Xml.Linq.XElement(\"");


#line 249 "MethodTemplate.cshtml"
                                                     Write(Model.RequestBody.ModelType.XmlName);


#line default
#line hidden
WriteLiteral("\", System.Linq.Enumerable.Select(");


#line 249 "MethodTemplate.cshtml"
                                                                                                                           Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(", x => new System.Xml.Linq.XElement(\"");


#line 249 "MethodTemplate.cshtml"
                                                                                                                                                                                         Write((Model.RequestBody.ModelType as SequenceType).ElementXmlName);


#line default
#line hidden
WriteLiteral("\", x))).ToString();\n");


#line 250 "MethodTemplate.cshtml"
                    }
                    else
                    {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("_requestContent = ");


#line 253 "MethodTemplate.cshtml"
                        Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(".XmlSerialize( new System.Xml.Linq.XElement(\"");


#line 253 "MethodTemplate.cshtml"
                                                                                             Write(Model.RequestBody.ModelType.XmlName);


#line default
#line hidden
WriteLiteral("\") ).ToString(); \n");

WriteLiteral("        ");

WriteLiteral("_requestContent = $\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n{_requestContent" +
"}\";\n");


#line 255 "MethodTemplate.cshtml"
                    }


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("_httpRequest.Content = new System.Net.Http.StringContent(_requestContent, System." +
"Text.Encoding.UTF8);\n");

WriteLiteral("        ");

WriteLiteral("_httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeader" +
"Value.Parse(\"");


#line 257 "MethodTemplate.cshtml"
                                                                                                    Write(Model.RequestContentType);


#line default
#line hidden
WriteLiteral("\");\n");

WriteLiteral("    ");

WriteLiteral("}\n");


#line 259 "MethodTemplate.cshtml"
                }
            }
            else
            {
                if (!Model.RequestBody.IsNullable()) {

#line default
#line hidden
WriteLiteral("\n    _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObje" +
"ct(");


#line 264 "MethodTemplate.cshtml"
                                                                               Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(", ");


#line 264 "MethodTemplate.cshtml"
                                                                                                          Write(Model.GetSerializationSettingsReference(Model.RequestBody.ModelType));


#line default
#line hidden
WriteLiteral(");\n    _httpRequest.Content = new System.Net.Http.StringContent(_requestContent, " +
"System.Text.Encoding.UTF8);\n    _httpRequest.Content.Headers.ContentType =System" +
".Net.Http.Headers.MediaTypeHeaderValue.Parse(\"");


#line 266 "MethodTemplate.cshtml"
                                                                                              Write(Model.RequestContentType);


#line default
#line hidden
WriteLiteral("\");");

WriteLiteral("\n");


#line 267 "MethodTemplate.cshtml"
                }
                else {

#line default
#line hidden
WriteLiteral("\n    if(");


#line 269 "MethodTemplate.cshtml"
   Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(" != null)\n    {\n        _requestContent = Microsoft.Rest.Serialization.SafeJsonCo" +
"nvert.SerializeObject(");


#line 271 "MethodTemplate.cshtml"
                                                                                   Write(Model.RequestBody.Name);


#line default
#line hidden
WriteLiteral(", ");


#line 271 "MethodTemplate.cshtml"
                                                                                                              Write(Model.GetSerializationSettingsReference(Model.RequestBody.ModelType));


#line default
#line hidden
WriteLiteral(");\n        _httpRequest.Content = new System.Net.Http.StringContent(_requestConte" +
"nt, System.Text.Encoding.UTF8);\n        _httpRequest.Content.Headers.ContentType" +
" =System.Net.Http.Headers.MediaTypeHeaderValue.Parse(\"");


#line 273 "MethodTemplate.cshtml"
                                                                                                  Write(Model.RequestContentType);


#line default
#line hidden
WriteLiteral("\");\n    }");

WriteLiteral("\n");


#line 275 "MethodTemplate.cshtml"
                }
            }
        }
    }
    else if (Model.LogicalParameters.Any(p => p.Location == ParameterLocation.FormData))
    {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("System.Net.Http.MultipartFormDataContent _multiPartContent = new System.Net.Http." +
"MultipartFormDataContent();\n");


#line 282 "MethodTemplate.cshtml"
        
        foreach (ParameterCs parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.FormData))
        {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("if (");


#line 285 "MethodTemplate.cshtml"
      Write(parameter.Name);


#line default
#line hidden
WriteLiteral(" != null)\n");

WriteLiteral("    ");

WriteLiteral("{\n");


#line 287 "MethodTemplate.cshtml"
        { string localParam = "_"+ @parameter.Name.Value.Replace("this.", ""); }
        if (parameter.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
        {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("        \n         System.Net.Http.StreamContent _");


#line 291 "MethodTemplate.cshtml"
                                   Write(parameter.Name);


#line default
#line hidden
WriteLiteral(" = new System.Net.Http.StreamContent(");


#line 291 "MethodTemplate.cshtml"
                                                                                       Write(parameter.Name);


#line default
#line hidden
WriteLiteral(");\n        (localParam).Headers.ContentType = new System.Net.Http.Headers.MediaTy" +
"peHeaderValue(\"application/octet-stream\");\n        System.IO.FileStream (localPa" +
"ram)AsFileStream = ");


#line 293 "MethodTemplate.cshtml"
                                                   Write(parameter.Name);


#line default
#line hidden
WriteLiteral(@" as System.IO.FileStream;
        if ((localParam)AsFileStream != null)
        {
            System.Net.Http.Headers.ContentDispositionHeaderValue _contentDispositionHeaderValue = new System.Net.Http.Headers.ContentDispositionHeaderValue(""form-data"");
            _contentDispositionHeaderValue.Name = """);


#line 297 "MethodTemplate.cshtml"
                                               Write(parameter.SerializedName);


#line default
#line hidden
WriteLiteral("\";\n            _contentDispositionHeaderValue.FileName = (localParam)AsFileStream" +
".Name;\n            (localParam).Headers.ContentDisposition = _contentDisposition" +
"HeaderValue;        \n        }    \n        ");

WriteLiteral("\n");


#line 302 "MethodTemplate.cshtml"
            }
            else
            {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("System.Net.Http.StringContent (localParam) = new System.Net.Http.StringContent(");


#line 305 "MethodTemplate.cshtml"
                                                                                     Write(parameter.ModelType.ToString(Model.ClientReference, parameter.Name));


#line default
#line hidden
WriteLiteral(", System.Text.Encoding.UTF8);\n");


#line 306 "MethodTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("_multiPartContent.Add((localParam), \"");


#line 307 "MethodTemplate.cshtml"
                                           Write(parameter.SerializedName);


#line default
#line hidden
WriteLiteral("\");\n");

WriteLiteral("    ");

WriteLiteral("}\n");


#line 309 "MethodTemplate.cshtml"
        }


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("_httpRequest.Content = _multiPartContent;\n");


#line 311 "MethodTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("\n");


#line 313 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 313 "MethodTemplate.cshtml"
     if (Settings.AddCredentials)
    {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("\n    // Set Credentials\n    if (");


#line 317 "MethodTemplate.cshtml"
    Write(Model.ClientReference);


#line default
#line hidden
WriteLiteral(".Credentials != null)\n    {\n        cancellationToken.ThrowIfCancellationRequeste" +
"d();\n        await ");


#line 320 "MethodTemplate.cshtml"
          Write(Model.ClientReference);


#line default
#line hidden
WriteLiteral(".Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAw" +
"ait(false);\n    }\n        ");

WriteLiteral("\n");


#line 323 "MethodTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("    \n    // Send Request\n    if (_shouldTrace)\n    {\n        Microsoft.Rest.Servi" +
"ceClientTracing.SendRequest(_invocationId, _httpRequest);\n    }\n\n    cancellatio" +
"nToken.ThrowIfCancellationRequested();\n");


#line 332 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 332 "MethodTemplate.cshtml"
     if (Model.ReturnType.Body.IsPrimaryType(KnownPrimaryType.Stream) || Model.HttpMethod == HttpMethod.Head)
    {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("_httpResponse = await ");


#line 334 "MethodTemplate.cshtml"
                        Write(Model.ClientReference);


#line default
#line hidden
WriteLiteral(".HttpClient.SendAsync(_httpRequest, System.Net.Http.HttpCompletionOption.Response" +
"HeadersRead, cancellationToken).ConfigureAwait(false);\n");


#line 335 "MethodTemplate.cshtml"
    }
    else
    {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("_httpResponse = await ");


#line 338 "MethodTemplate.cshtml"
                        Write(Model.ClientReference);


#line default
#line hidden
WriteLiteral(".HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);\n");


#line 339 "MethodTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral(@"    if (_shouldTrace)
    {
        Microsoft.Rest.ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
    }

    System.Net.HttpStatusCode _statusCode = _httpResponse.StatusCode;
    cancellationToken.ThrowIfCancellationRequested();
    string _responseContent = null;

    if (");


#line 349 "MethodTemplate.cshtml"
    Write(Model.FailureStatusCodePredicate);


#line default
#line hidden
WriteLiteral(")\n    {\n        var ex = new ");


#line 351 "MethodTemplate.cshtml"
                 Write(Model.OperationExceptionTypeString);


#line default
#line hidden
WriteLiteral("(string.Format(\"Operation returned an invalid status code \'{0}\'\", _statusCode));\n" +
"");


#line 352 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 352 "MethodTemplate.cshtml"
     if (Model.DefaultResponse.Body != null)
    {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("try\n");

WriteLiteral("        ");

WriteLiteral("{\n");


#line 356 "MethodTemplate.cshtml"
            if (Model.DefaultResponse.Body.IsPrimaryType(KnownPrimaryType.Stream))
            {


#line default
#line hidden
WriteLiteral("            ");


#line 358 "MethodTemplate.cshtml"
          Write(Model.DefaultResponse.Body.AsNullableType());


#line default
#line hidden
WriteLiteral(" _errorBody = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(fals" +
"e);\n");


#line 359 "MethodTemplate.cshtml"
            }
            else
            {


#line default
#line hidden
WriteLiteral("            ");

WriteLiteral("_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait" +
"(false);\n");

WriteLiteral("            ");


#line 363 "MethodTemplate.cshtml"
          Write(Model.DefaultResponse.Body.AsNullableType());


#line default
#line hidden
WriteLiteral(" _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<");


#line 363 "MethodTemplate.cshtml"
                                                                                                                                      Write(Model.DefaultResponse.Body.AsNullableType());


#line default
#line hidden
WriteLiteral(">(_responseContent, ");


#line 363 "MethodTemplate.cshtml"
                                                                                                                                                                                                        Write(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body));


#line default
#line hidden
WriteLiteral(");\n");


#line 364 "MethodTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("            ");

WriteLiteral("if (_errorBody != null)\n");

WriteLiteral("            ");

WriteLiteral("{\n");

WriteLiteral("                ");


#line 367 "MethodTemplate.cshtml"
              Write(Model.InitializeExceptionWithMessage);


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("                ");

WriteLiteral("ex.Body = _errorBody;\n");

WriteLiteral("            ");

WriteLiteral("}\n");

WriteLiteral("        ");

WriteLiteral("}\n");

WriteLiteral("        ");

WriteLiteral("catch (Newtonsoft.Json.JsonException)\n");

WriteLiteral("        ");

WriteLiteral("{\n");

WriteLiteral("        ");

WriteLiteral("    // Ignore the exception\n");

WriteLiteral("        ");

WriteLiteral("}\n");


#line 375 "MethodTemplate.cshtml"
    }
    else
    {
        //If not defined by default model, read content as string


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("if (_httpResponse.Content != null) {\n");

WriteLiteral("            ");

WriteLiteral("_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait" +
"(false);\n");

WriteLiteral("        ");

WriteLiteral("}\n");

WriteLiteral("        ");

WriteLiteral("else {\n");

WriteLiteral("            ");

WriteLiteral("_responseContent = string.Empty;\n");

WriteLiteral("        ");

WriteLiteral("}\n");


#line 385 "MethodTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("\n        ex.Request = new Microsoft.Rest.HttpRequestMessageWrapper(_httpRequest, " +
"_requestContent);\n        ex.Response = new Microsoft.Rest.HttpResponseMessageWr" +
"apper(_httpResponse, _responseContent);\n");

WriteLiteral("        ");


#line 389 "MethodTemplate.cshtml"
    Write(Model.InitializeException);


#line default
#line hidden
WriteLiteral(@"
        if (_shouldTrace)
        {
            Microsoft.Rest.ServiceClientTracing.Error(_invocationId, ex);
        }

        _httpRequest.Dispose();
        if (_httpResponse != null)
        {
            _httpResponse.Dispose();
        }
        throw ex;
    }

    // Create Result
    var _result = new ");


#line 404 "MethodTemplate.cshtml"
                  Write(Model.OperationResponseReturnTypeString);


#line default
#line hidden
WriteLiteral("();\n    _result.Request = _httpRequest;\n    _result.Response = _httpResponse;\n");

WriteLiteral("    ");


#line 407 "MethodTemplate.cshtml"
Write(Model.InitializeResponseBody);


#line default
#line hidden
WriteLiteral("\n\n");


#line 409 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 409 "MethodTemplate.cshtml"
     foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null))
    {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("\n    // Deserialize Response\n    if ((int)_statusCode == ");


#line 413 "MethodTemplate.cshtml"
                       Write(MethodCs.GetStatusCodeReference(responsePair.Key));


#line default
#line hidden
WriteLiteral(")\n    {\n");


#line 415 "MethodTemplate.cshtml"
        

#line default
#line hidden

#line 415 "MethodTemplate.cshtml"
         if (responsePair.Value.Body.IsPrimaryType(KnownPrimaryType.Stream))
        {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("_result.Body = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(fal" +
"se);\n");


#line 418 "MethodTemplate.cshtml"
        }
        else
        {



#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait" +
"(false);\n");

WriteLiteral("        ");

WriteLiteral("try\n");

WriteLiteral("        ");

WriteLiteral("{\n");


#line 425 "MethodTemplate.cshtml"
            if (Model.CodeModel.ShouldGenerateXmlSerialization)
            {

#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("            ");


#line 427 "MethodTemplate.cshtml"
       Write(responsePair.Value.Body.AsNullableType());


#line default
#line hidden
WriteLiteral(@" _tmp_ = null;
            if (_httpResponse.Content.Headers.ContentType.MediaType == ""application/xml"" &&
                (XmlSerialization.XmlDeserializationClass).Root((XmlSerialization.GenerateDeserializer(Model.CodeModel, responsePair.Value.Body)))(System.Xml.Linq.XElement.Parse(_responseContent), out _tmp_))
            {
                _result.Body = _tmp_;
            }else
            {
                _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<");


#line 434 "MethodTemplate.cshtml"
                                                                                          Write(responsePair.Value.Body.AsNullableType());


#line default
#line hidden
WriteLiteral(">(_responseContent, ");


#line 434 "MethodTemplate.cshtml"
                                                                                                                                                         Write(Model.GetDeserializationSettingsReference(responsePair.Value.Body));


#line default
#line hidden
WriteLiteral(");\n            }");

WriteLiteral("\n");


#line 436 "MethodTemplate.cshtml"
            }
            else
            {

#line default
#line hidden
WriteLiteral("\n            _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.Deserial" +
"izeObject<");


#line 439 "MethodTemplate.cshtml"
                                                                                      Write(responsePair.Value.Body.AsNullableType());


#line default
#line hidden
WriteLiteral(">(_responseContent, ");


#line 439 "MethodTemplate.cshtml"
                                                                                                                                                     Write(Model.GetDeserializationSettingsReference(responsePair.Value.Body));


#line default
#line hidden
WriteLiteral(");");

WriteLiteral("\n");


#line 440 "MethodTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("}\n");

WriteLiteral("        ");

WriteLiteral("catch (Newtonsoft.Json.JsonException ex)\n");

WriteLiteral("        ");

WriteLiteral("{\n");

WriteLiteral("        ");

WriteLiteral("    _httpRequest.Dispose();\n");

WriteLiteral("        ");

WriteLiteral("    if (_httpResponse != null)\n");

WriteLiteral("        ");

WriteLiteral("    {\n");

WriteLiteral("        ");

WriteLiteral("        _httpResponse.Dispose();\n");

WriteLiteral("        ");

WriteLiteral("    }\n");

WriteLiteral("        ");

WriteLiteral("    throw new Microsoft.Rest.SerializationException(\"Unable to deserialize the re" +
"sponse.\", _responseContent, ex);\n");

WriteLiteral("        ");

WriteLiteral("}\n");


#line 451 "MethodTemplate.cshtml"
        }


#line default
#line hidden
WriteLiteral("    }\n    ");

WriteLiteral("\n");


#line 454 "MethodTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("\n");


#line 456 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 456 "MethodTemplate.cshtml"
     if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any())
    {
        if (Model.DefaultResponse.Body.IsPrimaryType(KnownPrimaryType.Stream))
        {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("_result.Body = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(fal" +
"se);\n");


#line 461 "MethodTemplate.cshtml"
        }
        else
        {


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("string _defaultResponseContent = await _httpResponse.Content.ReadAsStringAsync()." +
"ConfigureAwait(false);\n");

WriteLiteral("    ");

WriteLiteral("try\n");

WriteLiteral("    ");

WriteLiteral("{\n");


#line 467 "MethodTemplate.cshtml"
        if (Model.CodeModel.ShouldGenerateXmlSerialization)
        {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral(" ");


#line 469 "MethodTemplate.cshtml"
      Write(Model.DefaultResponse.Body.AsNullableType());


#line default
#line hidden
WriteLiteral(" _tmp_ = null;\n");

WriteLiteral("        ");

WriteLiteral(" if (_httpResponse.Content.Headers.ContentType.MediaType == \"application/xml\" &&\n" +
"");

WriteLiteral("        ");

WriteLiteral("     (XmlSerialization.XmlDeserializationClass).Root((XmlSerialization.GenerateDe" +
"serializer(Model.CodeModel, Model.DefaultResponse.Body)))(System.Xml.Linq.XEleme" +
"nt.Parse(_defaultResponseContent), out _tmp_))\n");

WriteLiteral("        ");

WriteLiteral("{\n");

WriteLiteral("        ");

WriteLiteral("   _result.Body = _tmp_;\n");

WriteLiteral("        ");

WriteLiteral("} els e\n");

WriteLiteral("        ");

WriteLiteral("{\n");

WriteLiteral("        ");

WriteLiteral("    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject" +
"<");


#line 476 "MethodTemplate.cshtml"
                                                                                        Write(Model.DefaultResponse.Body.AsNullableType());


#line default
#line hidden
WriteLiteral(">(_defaultResponseContent, ");


#line 476 "MethodTemplate.cshtml"
                                                                                                                                                                 Write(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body));


#line default
#line hidden
WriteLiteral(");\n");

WriteLiteral("        ");

WriteLiteral("}\n");


#line 478 "MethodTemplate.cshtml"
        }
        else
        {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("_result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<");


#line 481 "MethodTemplate.cshtml"
                                                                                    Write(Model.DefaultResponse.Body.AsNullableType());


#line default
#line hidden
WriteLiteral(">(_defaultResponseContent, ");


#line 481 "MethodTemplate.cshtml"
                                                                                                                                                             Write(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body));


#line default
#line hidden
WriteLiteral(");\n");


#line 482 "MethodTemplate.cshtml"
        }


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("}\n");

WriteLiteral("    ");

WriteLiteral("catch (Newtonsoft.Json.JsonException ex)\n");

WriteLiteral("    ");

WriteLiteral("{\n");

WriteLiteral("    ");

WriteLiteral("    _httpRequest.Dispose();\n");

WriteLiteral("    ");

WriteLiteral("    if (_httpResponse != null)\n");

WriteLiteral("    ");

WriteLiteral("    {\n");

WriteLiteral("    ");

WriteLiteral("        _httpResponse.Dispose();\n");

WriteLiteral("    ");

WriteLiteral("    }\n");

WriteLiteral("    ");

WriteLiteral("    throw new Microsoft.Rest.SerializationException(\"Unable to deserialize the re" +
"sponse.\", _defaultResponseContent, ex);\n");

WriteLiteral("    ");

WriteLiteral("}\n");


#line 493 "MethodTemplate.cshtml"
        }
    }


#line default
#line hidden
WriteLiteral("\n");


#line 496 "MethodTemplate.cshtml"
    

#line default
#line hidden

#line 496 "MethodTemplate.cshtml"
     if (Model.ReturnType.Headers != null)
    {



#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("try\n");

WriteLiteral("    ");

WriteLiteral("{\n");

WriteLiteral("        ");

WriteLiteral("_result.Headers = _httpResponse.GetHeadersAsJson().ToObject<");


#line 501 "MethodTemplate.cshtml"
                                                                  Write(Model.ReturnType.Headers.Name);


#line default
#line hidden
WriteLiteral(">(Newtonsoft.Json.JsonSerializer.Create(");


#line 501 "MethodTemplate.cshtml"
                                                                                                                                          Write(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body));


#line default
#line hidden
WriteLiteral("));\n");


#line 502 "MethodTemplate.cshtml"
        foreach (var property in (Model.ReturnType.Headers as CompositeType).Properties.OfType<PropertyCs>().Where(p => p.IsHeaderCollection))
        {


#line default
#line hidden
WriteLiteral("        ");

WriteLiteral("_result.Headers.");


#line 504 "MethodTemplate.cshtml"
                      Write(property.Name);


#line default
#line hidden
WriteLiteral(" = new ");


#line 504 "MethodTemplate.cshtml"
                                             Write(property.ModelTypeName.Replace("IDictionary", "Dictionary"));


#line default
#line hidden
WriteLiteral("();\n");

WriteLiteral("        ");

WriteLiteral("foreach (var header in _httpResponse.Headers)\n");

WriteLiteral("        ");

WriteLiteral("{\n");

WriteLiteral("        ");

WriteLiteral("    if (header.Key.StartsWith(\"");


#line 507 "MethodTemplate.cshtml"
                                     Write(property.HeaderCollectionPrefix);


#line default
#line hidden
WriteLiteral("\"))\n");

WriteLiteral("        ");

WriteLiteral("    {\n");

WriteLiteral("        ");

WriteLiteral("        _result.Headers.");


#line 509 "MethodTemplate.cshtml"
                              Write(property.Name);


#line default
#line hidden
WriteLiteral("[header.Key.Replace(\"");


#line 509 "MethodTemplate.cshtml"
                                                                   Write(property.HeaderCollectionPrefix);


#line default
#line hidden
WriteLiteral("\", \"\")] = header.Value.FirstOrDefault() as ");


#line 509 "MethodTemplate.cshtml"
                                                                                                                                                Write((property.ModelType as DictionaryType).ValueType.Name);


#line default
#line hidden
WriteLiteral(";\n");

WriteLiteral("        ");

WriteLiteral("    }\n");

WriteLiteral("        ");

WriteLiteral("}\n");


#line 512 "MethodTemplate.cshtml"
        }


#line default
#line hidden
WriteLiteral("    ");

WriteLiteral("}\n");

WriteLiteral("    ");

WriteLiteral("catch (Newtonsoft.Json.JsonException ex)\n");

WriteLiteral("    ");

WriteLiteral("{\n");

WriteLiteral("    ");

WriteLiteral("    _httpRequest.Dispose();\n");

WriteLiteral("    ");

WriteLiteral("    if (_httpResponse != null)\n");

WriteLiteral("    ");

WriteLiteral("    {\n");

WriteLiteral("    ");

WriteLiteral("        _httpResponse.Dispose();\n");

WriteLiteral("    ");

WriteLiteral("    }\n");

WriteLiteral("    ");

WriteLiteral("    throw new Microsoft.Rest.SerializationException(\"Unable to deserialize the he" +
"aders.\", _httpResponse.GetHeadersAsJson().ToString(), ex);\n");

WriteLiteral("    ");

WriteLiteral("}\n");


#line 523 "MethodTemplate.cshtml"
    }


#line default
#line hidden
WriteLiteral("\n    if (_shouldTrace)\n    {\n        Microsoft.Rest.ServiceClientTracing.Exit(_in" +
"vocationId, _result);\n    }\n\n    return _result;\n}\n");

}
}
}
#pragma warning restore 1591
